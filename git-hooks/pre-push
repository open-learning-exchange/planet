#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

pass=true
RED='\033[1;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Function to output result of tests
output_result() {
  ret_code=$1
  message=$2
  output=$3

  if [ $ret_code != 0 ]; then
    printf "${RED}${message} failed.${NC}\n"
    echo "$output"
    pass=false
  else
    printf "${GREEN}$message passed.${NC}\n"
  fi
}

# Get number of uncommitted changes
CHANGES=$(git diff --numstat | wc -l)
CHANGES_CACHED=$(git diff --cached --numstat | wc -l)
TOTAL_CHANGES=$(($CHANGES + $CHANGES_CACHED))

# Stash all uncommitted changes before running tests
git stash -k

# Check if vagrant is running
vagrant_status=$(vagrant status dev --machine-readable | grep state,running)

echo "Running Linters:"
if [ "$vagrant_status" = "" ]; then
  tslint=$(npm run lint)
else
  tslint=$(vagrant ssh dev -- -t 'cd /vagrant;npm run lint')
fi

ret_code_tslint=$?
output_result $ret_code_tslint "tslint" $tslint

# If we stashed changes earlier, pop them back off the stack
if [ $TOTAL_CHANGES -ne "0" ]
then
  echo "Popping" $TOTAL_CHANGES "changes off the stack..."
  git stash pop -q
fi

# The 0 exit code will only be sent if pass=true
# Any failure will set pass=false
if $pass; then
  exit 0
fi

exit 1
