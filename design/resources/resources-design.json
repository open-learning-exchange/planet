{"views":{"count_tags":{"map":"function (doc) {\n        for (var i = 0; i < doc.tags.length; i++) {\n          emit(doc.tags[i], 1);\n        }\n      }","reduce":"_count"},"titles":{"map":"function (doc) {\n        emit(doc.title.toLowerCase().trim(), doc.privateFor);\n      }"}},"validate_doc_update":"function (newDoc, oldDoc, userCtx, secObj) {\n    var is_server_or_database_admin = function(userCtx, secObj) {\n      // see if the user is a server admin\n      if(userCtx.roles.indexOf('_admin') !== -1) {\n        return true; // a server admin\n      }\n\n      // see if the user a database admin specified by name\n      if(secObj && secObj.admins && secObj.admins.names) {\n        if(secObj.admins.names.indexOf(userCtx.name) !== -1) {\n          return true; // database admin\n        }\n      }\n\n      // see if the user a database admin specified by role\n      if(secObj && secObj.admins && secObj.admins.roles) {\n        var db_roles = secObj.admins.roles;\n        for(var idx = 0; idx < userCtx.roles.length; idx++) {\n          var user_role = userCtx.roles[idx];\n          if(db_roles.indexOf(user_role) !== -1) {\n            return true; // role matches!\n          }\n        }\n      }\n      return false; // default to no admin\n    }\n    function writeAccess(userCtx, secObj) {\n      var writeRoles = ['learner', 'leader'];\n      return userCtx.roles.reduce(\n        function(hasWriteRole, role) {\n          return hasWriteRole || writeRoles.indexOf(role) > -1;\n        },\n        false\n      ) || is_server_or_database_admin(userCtx, secObj);\n    }\n    var hasWriteAccess = writeAccess(userCtx);\n    if(!hasWriteAccess) {\n      throw { forbidden: 'You have only read-only access' };\n    }\n  }"}
